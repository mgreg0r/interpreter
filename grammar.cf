entrypoints Stmt ;

comment "//" ;

-- statements
BBlock.    Block ::= "{" [Stmt] "}" ;
BStmt.     Stmt ::= Block ;
Empty.     Stmt ::= ";" ;
ExpStmt.   Stmt ::= Expr ;
separator  Stmt "" ;
VarDecl.   Stmt ::= Type Ident ";" ;
VarAsgn.   Stmt ::= Ident "=" Expr ";" ;
Print.     Stmt ::= "print" "(" Expr ")" ";" ;
Cond.      Stmt ::= "if" "(" Expr ")" Block; 
CondElse.  Stmt ::= "if" "(" Expr ")" Block "else" Block ;
While.     Stmt ::= "while" "(" Expr ")" Block ;
ArrayDecl. Stmt ::= Type Ident "[" [Expr] "]" ";" ;
ArrayAsgn. Stmt ::= Ident "[" [Expr] "]" "=" Expr ";" ;
Break.     Stmt ::= "break" ";" ;
Continue.  Stmt ::= "continue" ";"  ;

FnDecl.    Stmt ::= Type Ident "(" [Arg] ")" Block ;
ValArg.    Arg ::= Type Ident ;
RefArg.    Arg ::= "ref" Type Ident ;
separator  Arg "," ;

Ret.       Stmt ::= "return" Expr ";" ;
VRet.      Stmt ::= "return" ";" ;


-- Types
Int.       Type ::= "int" ;
Str.       Type ::= "string" ;
Bool.      Type ::= "bool" ;
Void.      Type ::= "void" ;


-- Expressions
EVar.      Expr6 ::= Ident ;
ELitInt.   Expr6 ::= Integer ;
ELitTrue.  Expr6 ::= "true" ;
ELitFalse. Expr6 ::= "false" ;
EApp.      Expr6 ::= Ident "(" [Expr] ")" ;
EIndex.    Expr6 ::= Ident "[" [Expr] "]" ;
EString.   Expr6 ::= String ;
Neg.       Expr5 ::= "-" Expr6 ;
Not.       Expr5 ::= "!" Expr6 ;
EMul.      Expr4 ::= Expr4 MulOp Expr5 ;
EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;
ERel.      Expr2 ::= Expr2 RelOp Expr3 ;
EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;
EOr.       Expr ::= Expr1 "||" Expr ;
coercions  Expr 6 ;
separator  Expr "," ;


-- operators -----------------------------------------------
Plus.      AddOp ::= "+" ;
Minus.     AddOp ::= "-" ;
Times.     MulOp ::= "*" ;
Div.       MulOp ::= "/" ;
Mod.       MulOp ::= "%" ;
LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
EQU.       RelOp ::= "==" ;
NE.        RelOp ::= "!=" ;


